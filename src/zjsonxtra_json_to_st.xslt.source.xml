<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tt="http://www.sap.com/transformation-templates" version="1.0">

  <xsl:output indent="yes" method="xml"/>
  <xsl:strip-spaces elements="*"/>


  <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'"/>
  <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>

  <!-- DON'T USE PRETTY PRINTER WHICH REPLACES &#10; WITH \r\n, WHICH CAUSES SOURCE CODE -->

  <xsl:template match="/">

    <tt:transform>

      <tt:root name="ABAPROOT"/>

      <tt:template>

        <xsl:apply-templates select="*"/>

      </tt:template>
    </tt:transform>

  </xsl:template>


  <xsl:template match="array">
    <xsl:call-template name="wrap-group-if-parent-is-object">
      <xsl:with-param name="nodeset">
        <array>
          <tt:loop>
            <xsl:choose>
              <xsl:when test="not(parent::*)">
                <xsl:attribute name="ref">.ABAPROOT</xsl:attribute>
              </xsl:when>
              <xsl:when test="name(..)='object'">
                <xsl:attribute name="ref">
                  <xsl:value-of select="@name"/>
                </xsl:attribute>
              </xsl:when>
            </xsl:choose>
            <xsl:apply-templates select="*[1]"/>
          </tt:loop>
        </array>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>


  <xsl:template match="object">
    <xsl:call-template name="wrap-group-if-parent-is-object">
      <xsl:with-param name="nodeset">
        <object>
          <xsl:choose>
            <xsl:when test="not(parent::*)">
              <xsl:attribute name="tt:ref">.ABAPROOT</xsl:attribute>
            </xsl:when>
            <xsl:when test="name(..)='object'">
              <xsl:attribute name="tt:ref">
                <xsl:value-of select="@name"/>
              </xsl:attribute>
            </xsl:when>
          </xsl:choose>
          <xsl:variable name="inner_nodes">
            <xsl:apply-templates select="*"/>
          </xsl:variable>
          <xsl:if test="$inner_nodes and count($inner_nodes[1]/*)!=0">
            <!-- I had <tt:group/> and $inner_nodes true at the same time, so needed to add an extra obscure condition-->
            <tt:group>
              <xsl:copy-of select="$inner_nodes"/>
            </tt:group>
          </xsl:if>
        </object>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>


  <xsl:template match="num">
    <xsl:call-template name="simple-element">
      <xsl:with-param name="elementName">num</xsl:with-param>
    </xsl:call-template>
  </xsl:template>


  <xsl:template match="str">
    <xsl:call-template name="simple-element">
      <xsl:with-param name="elementName">str</xsl:with-param>
    </xsl:call-template>
  </xsl:template>


  <xsl:template match="bool">
    <xsl:call-template name="simple-element">
      <xsl:with-param name="elementName">bool</xsl:with-param>
    </xsl:call-template>
  </xsl:template>


  <xsl:template match="null">
    <null>
      <xsl:call-template name="simple-attributes"/>
    </null>
  </xsl:template>


  <xsl:template name="wrap-group-if-parent-is-object">
    <xsl:param name="nodeset"/>
    <xsl:choose>
      <xsl:when test="not(parent::*)">
        <xsl:copy-of select="$nodeset"/>
      </xsl:when>
      <xsl:otherwise>
        <tt:cond>
          <xsl:if test="name(..)='object'">
            <xsl:attribute name="frq">?</xsl:attribute>
          </xsl:if>
          <xsl:copy-of select="$nodeset"/>
        </tt:cond>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <xsl:template name="simple-element">
    <xsl:param name="elementName"/>

    <tt:cond>
      <xsl:if test="name(..)='object'">
        <xsl:attribute name="frq">?</xsl:attribute>
      </xsl:if>
      <xsl:element name="{$elementName}">
        <xsl:call-template name="simple-attributes"/>
      </xsl:element>
    </tt:cond>
    <tt:cond>
      <xsl:if test="name(..)='object'">
        <xsl:attribute name="frq">?</xsl:attribute>
      </xsl:if>
      <null>
        <xsl:call-template name="simple-attributes"/>
      </null>
    </tt:cond>
  </xsl:template>


  <xsl:template name="simple-attributes">
    <xsl:choose>
      <xsl:when test="not(parent::*)">
        <xsl:attribute name="tt:value-ref">.ABAPROOT</xsl:attribute>
      </xsl:when>
      <xsl:when test="name(..)='object'">
        <xsl:attribute name="tt:value-ref">
          <xsl:value-of select="@name"/>
        </xsl:attribute>
        <xsl:attribute name="name">
          <xsl:value-of select="@name"/>
        </xsl:attribute>
      </xsl:when>
      <xsl:otherwise>
        <xsl:attribute name="tt:value-ref">
          <xsl:value-of select="'$ref'"/>
        </xsl:attribute>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


</xsl:stylesheet>
