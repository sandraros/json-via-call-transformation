<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

  <xsl:output indent="no" method="text"/>
  <xsl:strip-spaces elements="*"/>
  <xsl:variable name="new_line">
    <xsl:text disable-output-escaping="yes">
</xsl:text>
  </xsl:variable>


  <xsl:template match="/">

    <xsl:variable name="content">
      <xsl:apply-templates select="*"/>
    </xsl:variable>

    <xsl:if test="string($content/subTypes)!=''">
      <xsl:text>TYPES:</xsl:text>
      <xsl:value-of select="$new_line"/>
      <xsl:for-each select="$content/subTypes">
        <xsl:value-of select="."/>
        <xsl:choose>
          <xsl:when test="position() &lt; count(../subTypes)">
            <xsl:text>,</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>.</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:value-of select="$new_line"/>
      </xsl:for-each>
    </xsl:if>

    <xsl:text>DATA json TYPE </xsl:text>
    <xsl:value-of select="$content/mainType"/>
    <xsl:text>.</xsl:text>
    <xsl:value-of select="$new_line"/>

  </xsl:template>


  <xsl:template match="array">

    <!--<xsl:variable name="name">
      <xsl:call-template name="NAME">
        <xsl:with-param name="NAME" select="@name"/>
      </xsl:call-template>
    </xsl:variable>-->
    <xsl:variable name="name">
      <xsl:choose>
        <xsl:when test="name(..)='array' or not(parent::*)">
          <xsl:text>ty_</xsl:text>
          <xsl:value-of select="generate-id(.)"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="@name"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="content">
      <xsl:apply-templates select="*[1]"/>
    </xsl:variable>

    <xsl:copy-of select="$content/subTypes"/>
    <xsl:variable name="subtypename">
      <xsl:choose>
        <xsl:when test="name(*[1])='array' or name(*[1])='object'">
          <xsl:text>ty_</xsl:text>
          <xsl:value-of select="generate-id(*[1])"/>
        </xsl:when>
        <xsl:when test="count(*)=0">
          <!-- if empty array then use "string" type (arbitrary choice) -->
          <xsl:text>string</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:for-each select="$content/mainType">
            <xsl:value-of select="."/>
          </xsl:for-each>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="mainType">
      <xsl:text>STANDARD TABLE OF </xsl:text>
      <xsl:value-of select="$subtypename"/>
      <xsl:text> WITH EMPTY KEY</xsl:text>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="substring($subtypename,1,3)='ty_'">
        <mainType>
          <xsl:value-of select="$mainType"/>
        </mainType>
        <xsl:for-each select="$content/mainType">
          <subTypes>
            <xsl:value-of select="."/>
          </subTypes>
        </xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
        <mainType>
          <xsl:value-of select="$name"/>
          <xsl:text> TYPE </xsl:text>
          <xsl:value-of select="$mainType"/>
        </mainType>
      </xsl:otherwise>
    </xsl:choose>

  </xsl:template>


  <xsl:template match="object">

    <xsl:variable name="name">
      <xsl:choose>
        <xsl:when test="name(..)='array' or not(parent::*)">
          <xsl:text>ty_</xsl:text>
          <xsl:value-of select="generate-id(.)"/>
        </xsl:when>
        <xsl:when test="name(..)='object'">
          <xsl:value-of select="@name"/>
        </xsl:when>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="content2">
      <mainType>
        <xsl:text>BEGIN OF </xsl:text>
        <xsl:value-of select="$name"/>
      </mainType>
      <xsl:for-each select="*">
        <xsl:variable name="content">
          <xsl:apply-templates select="."/>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="name(.)='object'">
            <xsl:copy-of select="$content/mainType"/>
          </xsl:when>
          <xsl:otherwise>
            <mainType>
              <xsl:value-of select="@name"/>
              <xsl:text> TYPE </xsl:text>
              <xsl:value-of select="$content/mainType"/>
            </mainType>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:copy-of select="$content/subTypes"/>
      </xsl:for-each>
      <mainType>
        <xsl:text>END OF </xsl:text>
        <xsl:value-of select="$name"/>
      </mainType>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="count(*)=0">
        <!-- if empty object then use "string" type (arbitrary choice) -->
        <mainType>
          <xsl:text>string</xsl:text>
        </mainType>
      </xsl:when>
      <xsl:when test="substring($name,1,3)='ty_'">
        <xsl:copy-of select="$content2/subTypes"/>
        <xsl:for-each select="$content2/mainType">
          <subTypes>
            <xsl:value-of select="."/>
          </subTypes>
        </xsl:for-each>
        <mainType>
          <xsl:value-of select="$name"/>
        </mainType>
      </xsl:when>
      <xsl:otherwise>
        <xsl:copy-of select="$content2"/>
      </xsl:otherwise>
    </xsl:choose>

  </xsl:template>


  <xsl:template match="num">
    <mainType>decfloat34</mainType>
  </xsl:template>


  <xsl:template match="str">
    <mainType>string</mainType>
  </xsl:template>


  <xsl:template match="bool">
    <mainType>abap_bool</mainType>
  </xsl:template>


  <xsl:template match="null">
    <mainType>string</mainType>
  </xsl:template>


  <xsl:template name="NAME">
    <xsl:param name="NAME"/>
    <xsl:choose>
      <xsl:when test="string($NAME)!=''">
        <xsl:value-of select="$NAME"/>
      </xsl:when>
      <xsl:when test="string($NAME/../@name)!=''">
        <xsl:value-of select="$NAME/../@name"/>
      </xsl:when>
      <xsl:otherwise>main</xsl:otherwise>
    </xsl:choose>
  </xsl:template>


</xsl:stylesheet>
